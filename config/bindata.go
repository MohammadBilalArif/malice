// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x6d\x6b\xdb\x30\x10\xfe\xee\x5f\x71\x38\x30\x36\x58\x1c\xc7\xa1\xcd\x6a\x28\xa5\x74\xdd\x1b\xcd\x06\x6d\x61\xb0\xae\x0c\xd9\xba\xd8\x22\xb2\x64\x24\xb9\x6f\xbf\x7e\x77\x72\x9a\x2e\x1f\x07\x75\x02\xb2\xee\xed\x79\xee\xb9\xf3\x04\xce\x6c\xff\xe8\x54\xd3\x06\x78\x5b\xbf\x83\x22\x9f\x2f\x60\xca\xc7\x21\x54\x5a\xd4\x9b\x60\x7b\xf8\x66\x7d\x3b\x08\x58\x09\x65\xf0\x3d\x9c\x6a\x0d\x97\x9c\xe0\xe1\x12\x3d\xba\x3b\x94\x59\x32\x81\x2b\x44\xb8\xf8\x7a\x76\xfe\xfd\xea\x1c\xd6\xd6\x81\x56\x35\x1a\x8f\xa0\x0c\xdd\x3a\x11\x94\x35\x59\x92\x4c\x5e\xe7\x21\xbc\xd5\x29\xa3\x11\x7d\xb3\x56\xcd\xe0\x22\x00\xfc\x7f\x9d\x57\xe2\x93\x04\x15\x34\xc2\x31\xa4\x2b\xc1\x9d\xc3\xe5\x60\x82\xea\x70\x9f\x5f\x9a\x24\x37\x62\x08\xad\x75\xb7\x09\x80\x11\x5d\xcc\x78\xd6\x39\x25\xdb\x04\xac\x6b\x84\x51\x4f\x63\x3f\xe4\xfd\xac\xc2\x97\xa1\x1a\x7d\x95\xb2\x2f\x26\x2a\xbd\xb6\x83\x91\xe8\xe0\x0d\x9c\x9d\xff\xf8\x6d\x2e\xd4\x06\x3d\x04\x11\xc8\x14\x2c\xcd\x47\x18\x09\x15\xa2\xcb\xc6\x74\x69\x2b\x4a\x9f\x1f\x2d\x8f\xa6\xf9\xc1\xb4\x58\x5e\xe7\xcb\x72\x51\x94\x79\xfe\x8b\x9c\x9f\x94\xf3\x01\x6a\x2d\xbc\x07\x49\x25\xfc\x09\xfc\x6c\x1f\xc1\xd8\x70\x42\xac\xef\xb1\x62\xca\x83\xd3\x4c\x20\xcf\xe2\xaf\xfc\x90\x73\x61\x21\x3b\x65\xfe\x6c\x5d\xf3\x62\x19\x9d\xf3\x72\x41\x0f\x37\x8c\x9d\x50\x9a\x93\x5b\x4b\x00\x14\xe2\xbb\xd0\x67\xf8\x20\xba\x5e\x63\x56\xdb\x8e\x6b\xf4\xd6\xb1\xaf\x38\x60\x10\x5a\x2a\x8e\xe3\x93\x35\x8a\x7e\xa6\x45\x36\x3e\xef\xad\x93\x5c\x98\x58\x8a\x4a\x78\xfc\x57\xcb\x2e\xaa\x3f\x45\xbd\xe1\x2c\xd5\x89\x66\x4f\xe2\x19\x52\x7f\x41\xd5\x53\x1f\xc8\xc0\x21\x71\x81\x23\x9c\xb6\xb5\xd0\xcc\x31\x25\x35\xae\x5b\xe5\x81\xfe\xbc\xc9\x6e\x30\x46\x99\x06\x68\x1e\x1f\x6d\xbd\xa1\x68\xb6\xae\x44\x4d\xbb\x4d\x75\xb4\x8e\xb3\xf2\xd9\xb6\x0d\xe6\x79\x03\x47\x45\x9e\x03\x33\xe3\x2d\xb0\x03\x37\x37\xcf\xe9\x8a\x46\x54\x1a\x25\x5d\x83\x1b\x90\xe5\x31\x77\xca\x59\xd3\xa1\x09\x1c\x4e\x60\x4c\x46\xe2\x1d\x6a\xdb\xb3\x75\x9c\xdd\xd6\xde\x3b\x2b\x87\xfa\x79\x97\x64\xa4\xc3\x69\x9d\xa8\x5b\xfa\x3a\xa7\xfb\x3a\xa4\x11\x50\xf6\x56\x99\xa8\x7c\xa8\xfb\x72\x36\xdb\x35\x5a\x16\x8b\xe5\x21\xc7\x54\xca\x48\xff\x92\x56\xce\xe8\xbc\x17\x0e\x4b\x67\xd9\xad\x95\xd9\xf8\x7d\x75\xcb\xad\x90\xe9\x7e\x87\x45\x4e\xac\xb4\x6d\x9a\x91\xd5\x5a\x69\xdc\x67\x94\x91\x33\x8d\x7c\x1f\xbc\x7a\xc2\x67\x55\xe8\x3a\x4e\x6a\xb1\xbd\x55\x34\x9e\xa1\x67\xd0\x25\x13\x60\xc6\xf1\x73\x3a\x86\xb5\xd0\x9e\x75\x23\x25\x1e\x1e\x6f\x77\x8a\xee\x3c\xb4\x67\x21\xf4\x8c\x98\x6e\xdf\xfd\x78\xf9\x1b\x00\x00\xff\xff\x17\xa9\xce\x39\xeb\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1259, mode: os.FileMode(420), modTime: time.Unix(1477777483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

